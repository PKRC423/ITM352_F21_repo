///////////Exercise #1:
Create a Lab13 folder in your repo and a new file SimpleServer.js and copy the following into this file:

var http = require('http');

//create a server object:
http.createServer(function (req, res) {
    console.log(req.headers); //output the request headers to the console
    res.writeHead(200, { 'Content-Type': 'text/html' }); // set MIME type to HTML 
    res.write(`<h1>The server date is: ${Date.now()}</h1>`); //send a response to the client
    res.write('<h1>The client date is: <script>document.write( Date.now() );</script></h1>'); // send another response
    res.end(); //end the response
}).listen(8080); //the server object listens on port 8080

console.log('Hello world HTTP server listening on localhost port 8080');
Open a terminal and run it using node.js. Open a browser and make a request to localhost:8080

a) Why is this a “dynamic” web page? //Because  | What is processed on the client and what is processed on the server? | Why are the dates different even though they are obtained from the same clock (on the same machine)? | What would happen if the server was run on a different machine than the browser?

b) Does the request matter? How is the route for the HTTP request handled?

c) When you do a “view source” in the browser, where did the Javascript code executed on the server go ? Why isn’t it inside a <script> tag?

NOTE You may wish to install and use the npm application nodemon to automatically restart node after changes are saved in a file.

////////////////////Exercise 2: A Better Server Side for Web Applications
a. To do server side processing for a Web application we must set up the server to handle any request. Express makes setting up a web server for a web application easy. Install Express using npm install express in your terminal. Let’s start things by setting up a server that will respond to any HTTP request by sending back the type of request and the URL path from the request. Put the following code in a file called info_server_Ex2a.js:

var express = require('express');
var app = express();
app.all('*', function (request, response, next) {
    response.send(request.method + ' to path ' + request.path);
});
app.listen(8080, () => console.log(`listening on port 8080`)); // note the use of an anonymous function here
In the terminal, start the server node info_server_Ex2a.js and then in a browser try various URLs such as localhost:8080 and localhost:8080/xxx/yyy. What is the response you get and why? Explain how express handles routing an HTTP request on the port it is listening to.

b. Add a route to match with a GET request to the path test. Put this above the app.all() route. Test it with and without test.Explain why the app.all() route does not get handled anymore. Now move it below app.all() to and verify you get the expected response. Now add next(); after the response in app.all() and explain why you get an error in the console output. Now change the response.send() to console.log() in app.all() and explain why this no longer throws an error. It is recommended that you put this app.all() code in when you are developing a web app to see what requestes the server is receiving.

c. Now we will enable the server to respond to request for static files (files that are not intended to have any server-side processing) that are located in a directory called public (this is often called the “document root” directory). Make a copy of info_server_Ex2a.js and name it info_server_Ex2c.js

Before the app.listen add the following add the following:

app.use(express.static('./public'));

Terminate the previously running server (with ctrl-C) and run info_server_Ex2c.js. Create a simple html file hello.html that outputs <h1>Hello from <your name>!<h1> and save it in the public directory. Use a browser with the following URL http://localhost:8080/hello.html and see what response you get. Try localhost:8080/xxx and explain what response you get. Make a copy of hello.html and rename it hello.txt. Now try localhost:8080/hello.txt and explain the response. Do you think the app.use() middleweare must be placed at the bottom of the routing functions?

d. Copy your order_page.html from Exercise 4 in Lab 12 to the public directory. Change the action attribute of the form to localhost:8080/process_form. Make sure method="POST" in the form tag. Try http://localhost:8080/order_page.html in your browser and submit the form. Look at the console.log output and the response you get and explain.

We get a Cannot get because it is a static page and if we move the order_page into the public folder than it will be shown correctly.

///////////Exercise 3: Server Side Processing of Form Action
a. Make a copy of info_server_Ex2c.js and name it info_server_Ex3.js and add the following code after the app.all() statement:

app.use(myParser.urlencoded({ extended: true }));
app.post("/process_form", function (request, response) {
   response.send(request.body); 
});

Unfortunately Express does not provide functions to decode the body of an HTTP request so you will need to write this yourself or add one. Fortunately there’s a good one available! In your terminal (and be sure you are in the directory where info_server_Ex3.js is located), type npm install body-parser. After the installation is complete, in info_server_Ex3.js add the statement var myParser = require("body-parser"); after the var app = express(); statement. Now run info_server_Ex3.js. Try localhost:8080/order_page.html and verify that that you get the post data from the what you typed into the textbox after submitting the form. If this works, you have just done server-side processing of a POST from a web form. Congratulations!

b. In order_page.html cut the code that checks query string for quantity_textbox into info_server_Ex3.js (the if (typeof GET['quantity_textbox'] != 'undefined')) statement) and paste it over the response.send(POST); statement (i.e. delete the statement) in app.post() and change GET to POST. Copy the function isNonNegInt() from order_page.html and paste it into the top or bottom of app.post(). Change the document.write(`Thank you for purchasing ${q} things!`) to response.send(`Thank you for purchasing ${q} things!`); and delete window.stop(); and an else response.send(`${q} is not a quantity! Press the back button and try again.`); to the if-statement. Try localhost:8080/order_page.html with valid and invalid quantites and verify that it works as expected.

/////Exercise 4: Managing server-side
Often you need to do complex processing and responses on the server. A good design practice to help manage this is to separate out functionality and provide micro-services.

Make a copy of info_server_Ex3.js and name it info_server_Ex4.js.

a. It’s best not to clutter up the server code with the details of responding to requests. We can always create functions and move the code out of the way or put them in a file and load it in as a library. In info_server_Ex4.js cut and paste all the code and move it into a function called process_quantity_form (POST, response). replace all the code in app.post() with process_quantity_form(request.body, response);

b. You often have to use the same data in multiple places. It’s always best to have one central source for shared data rather than duplicate sources. For web applications the common way to handle this is providing a data service on the server (sometimes called a micro-service). The data source can be a code, a file, accessing a database or more generally another server (such as a directory server). Let’s implement a basic data service for our web application that shares product information for use in a form and the processing the form. For JSON data an easy way to do this is put the JSON into a file as a variable and load it in as a module. In your directory with info_server_Ex4.js, create a file called product_data.json and put the following data in it:

[
  {  
  "model":"Apple iPhone XS",  
  "price": 990.00
  },
  {  
  "model":"Samsung Galaxy",  
  "price": 240.00  
  }
];
At the top of info_server_Ex4.js put

var products = require('./product_data.json');

app.get("/product_data.js", function (request, response, next) {
   var products_str = `var products = ${JSON.stringify(products)};`;
   response.send(products_str);
});
and in the process_quantity_form() function add to the top

let model = products[0]['model'];
let model_price = products[0]['price'];
Replace the response with <h2>Thank you for purchasing ${q} ${model}. Your total is \$${q * model_price}!</h2> and now try out different quantities.

In the head tag of order_page.html add the line <script src="./product_data.js"></script>. Note that the path does NOT include the public directory. Why is this? 
        Because it is in the head so it is public to all the code within that document.

Before the form (or in the top of the form) add

document.write(`<h3>${products[0]["model"]} at \$${products[0]["price"]}</h3>`);

Reload order_page.html and verify that the Apple iPhone XS product is used in both the form and response to processing that form. Now change some of the information for the 0th element in product_data.json and verify that both order_page.html and info_server_Ex4.js use the updated information. How would you change the product being used here?

Exercise 5: Passing data to client from a server
There are often times you will want to pass data from the server to a client. Unfortunately, HTTP does not support “push” data from the server (at least HTTP/1 does not). That is, you cannot just send data to the client, even if you have an open connection from the server to the client. Because of this, data can only be passed from the server to the client in response to a request. There are generally two ways to do this. One way is to put the data into a query string and have the server re-direct to the page that needs the data adding this query string. Another way is to have the page fetch the data from a micro-service. The difference is that the first way will leave the page (the current document will be overwritten) while the second will stay on the page (the current document remains). We will try the query-string approach since it is simpler.

Make a copy of info_server_Ex4.js and name it info_server_Ex5.js. Start by copying the code in the route for process_form on your server that generates the receipt (including the isNonNegInt function) into a new file receipt.html and put this in the public directory. At the top of this file load the products data as done in order_page.html and also add the code:

        let params = (new URL(document.location)).searchParams;
        var q = params.get('quantity');
        
This code will read the query string and place the keys and values into a URLSearchParams object (params) for easy access to the data in the query string. Now remove any use of request (you are on the client now so this is not defined) and replace all uses of response with document.write (again, you are on the client which is the receiver of a response). Remove the code that increases the total_sold (yup, this is a server side thing and cannot be done in the client).

On your server, replace the response.send() with response.redirect('receipt.html?quantity=' + q);. This will tell the browser (the client) to do a GET request for the file receipt.html with a query string with key quantity and value whatever is in the variable q (which is the quantity purchased). Quit and restart the server, reload order_page.html to test.

d. Modify the response on the server to redirect back to order_page.html when there is an error with the query string ?error=Invalid%20Quantity&quantity_textbox=' + q. In order_page.html where you check if the query string has quantity_textbox, also check if the query string has key error and put its value in an alert panel (i.e. “Invalid Quantity”).

(Extra Credit) Create a micro-service to validate a quantity and respond an invoice. Have order_page.html fetch the invoice and display it after the purchase button is pressed. This should be done without leaving (or reloading) order_page.html. Hint: do not have an action for the the form or change it so that it does the fetch to the micro-service rather than POST to the server.

Extra Credit: Processing multiple inputs
Let’s make it possible to select quantities of a product from the shared products data. Copy info_server_Ex5.js and name it info_server_EC.js. Copy order_page.html and rename it order_page_multiple.html.

Task 1: Make order_page_multiple.html display inputs for all products in product_data.json. Replace the <form> element with

    <form name='quantity_form' action="process_form" method="POST">
        <script>
            for (i in products) {
                document.write(`<h3>${products[i]["brand"]} at \$${products[i]["price"]} (${products[i]["total_sold"]} sold)</h3>`);
                document.write(`
        <label for="quantity_textbox">quantity desired:</label>
        <input type="text" name="quantity_textbox[${i}]" onkeyup="checkQuantityTextbox(this);">
        <span id="quantity_textbox[${i}]_message">Enter a quantity</span>
        `);
            }
        </script>
        <br>
        <input type="submit" value='Purchase'>
    </form>
Now replace the checkQuantityTextbox() with

        function checkQuantityTextbox(theTextbox) {
            errs = isNonNegInt(theTextbox.value, true);
            document.getElementById(theTextbox.name + '_message').innerHTML = errs.join(", ");
        }
Run info_server_EC.js and request order_page_multiple.html and verify that all the products in products.json display. Test the checkQuantityTextbox function by trying vaid and invalid quantities. Review the changes made in the code and make sure you understand why were made and how they work!

Task 2: Process multiple quantities of products from the submitted form. In info_server_EC.js replace the code in the callback function in the route for post to /process_form (i.e. in the {}’s for app.post("/process_form", function (request, response) with

    receipt = '';
    let qtys = request.body[`quantity_textbox`];
    for (i in qtys) {
        q = qtys[i];
        let brand = products[i]['brand'];
        let brand_price = products[i]['price'];
        if (isNonNegInt(q)) {
            products[i]['total_sold'] += Number(q);
            receipt += `<h3>Thank you for purchasing: ${q} ${brand}. Your total is \$${q * brand_price}!</h3>`; // render template string
        } else {
            receipt += `<h3><font color="red">${q} is not a valid quantity for ${brand}!</font></h3>`;
        }
    }
    response.send(receipt);
    response.end();
Note: do not delete the isNonNegInt function definition if you put it here.

Run info_server_EC.js and try entering quantities for the products displayed! Do you see how things are connected through the shared data in product_data.json? Did you see how naming your form elements with []’s puts all the form data into an array? By the way, you can use this to create objects. Just use strings rather than numbers in [].

More extra credit When there are errors, see if you can pass the data and errors back to order_page_multiple.html to display problems and allow the user to fix and resubmit the form. You can do this by making a copy of the products array, adding an errors property for each product with values the errors (if any), then generating a query string from this new array (you can use a URLSearchParams to conveniently create a query string from the new array).